/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/
PARSER_BEGIN(Parser)

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
    public static void main(String args[]) throws ParseException
        {
            Parser parser = new Parser(System.in);
            SimpleNode root = parser.program();
            root.dump("");
            //parser.rule();
        }
}
PARSER_END(Parser)
SKIP :
{
    " "
|   "\r"
|   "\t"
}
TOKEN:{
    < NAF: "not">
}
TOKEN:
{
    < ID: ["a"-"z"](<LETTER>| <NUMBER> | "_")*>
|   < SYMBOLIC_COSTANT: ["a"-"z"](<LETTER> | <NUMBER> | "_")*>
|   < VARIABLE: ["A"-"Z"](<LETTER> | <NUMBER> | "_")*>
|   < STRING: "\"([\u00cb\u2020\"]|\\\")*\"">
|   < NUMBER: (["0"-"9"])+ >
|   < DOT: ".">
|   < BODY_TERM_SEPARATOR: ",">
//|   < TERM_SEPARATOR: ",">
|   < QUERY_MARK: "?">
|   < COLON: ":">
|   < SEMICOLON: ";">
|   < HEAD_SEPARATOR: "|">
|   < CONS: ":-">
|   < WCONS: ":~">
|   < PLUS: "+">
|   < MINUS: "-">
|   < TIMES: "*">
|   < DIV: "/">
|   < PARAM_OPEN: "(">
|   < PARAM_CLOSE: ")">
|   < SQUARE_OPEN: "[">
|   < SQUARE_CLOSE: "]">
|   < CURLY_OPEN: "{">
|   < CURLY_CLOSE: "}">
|   < EQUAL: "=">
|   < UNEQUAL: "<>" | "!=">
|   < LESS: "<">
|   < GREATER: ">">
|   < LESS_OR_EQ: "<=">
|   < GREATER_OR_EQ: ">=">
|   < AGGR_COUNT: "#count">
|   < AGGR_SUM: "#sum">
|   < AGGR_MAX: "#max">
|   < AGGR_MIN: "#min">
|   < COMMENT: "%.*$">
|   < MULTI_LINE_COMMENT: "/%.*%/">
//|   < BLANK: (" " | "\t"| "\n")+>
|   < LETTER: ["A"-"Z","a"-"z"]>
|   < AT: "@">
|   < EOL: "\n" >
|   < ANON_VAR:"_">
}

void parseOneLine():{/*@bgen(jjtree) parseOneLine */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEONELINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parseOneLine */
   try {
/*@egen*/
   program()
  | <EOL>
  | <EOF>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/               { System.exit(-1); }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

SimpleNode program():{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
    try {
/*@egen*/
    rules()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void rules():{/*@bgen(jjtree) rules */
  SimpleNode jjtn000 = new SimpleNode(JJTRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rules */
    try {
/*@egen*/
    [rule() rules()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

boolean rule()      :{/*@bgen(jjtree) RULE */
  SimpleNode jjtn000 = new SimpleNode(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RULE */
    try {
/*@egen*/
    <CONS> body() <DOT>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return true;}
|    head() [<CONS> body()] <DOT>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/  {return true;}
|   <WCONS> body() <DOT>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {return true;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void head()      :{/*@bgen(jjtree) HEAD */
  SimpleNode jjtn000 = new SimpleNode(JJTHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HEAD */
    try {
/*@egen*/
    disjunction() |
     choice_atom()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void body()      :{/*@bgen(jjtree) BODY */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BODY */
    try {
/*@egen*/
    conjunction()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void disjunction()             :{/*@bgen(jjtree) DISJUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTDISJUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DISJUNCTION */
     try {
/*@egen*/
     classic_literal() [<HEAD_SEPARATOR> disjunction()]/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void conjunction()             :{/*@bgen(jjtree) CONJUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTCONJUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONJUNCTION */
        try {
/*@egen*/

        (LOOKAHEAD(3) naf_literal() | [<NAF>] aggregate_atom())
        [<BODY_TERM_SEPARATOR> conjunction()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void choice_atom()             :{/*@bgen(jjtree) CHOICE_ATOM */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CHOICE_ATOM */
    try {
/*@egen*/
    [binop() term()] <CURLY_OPEN> choice_elements() <CURLY_CLOSE> [binop() term()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void choice_elements()                 :{/*@bgen(jjtree) CHOICE_ELEMENTS */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CHOICE_ELEMENTS */
     try {
/*@egen*/
     choice_element() [<SEMICOLON> choice_elements()]/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void choice_element()                :{/*@bgen(jjtree) CHOICE_ELEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CHOICE_ELEMENT */
   try {
/*@egen*/
   atom() [<COLON> naf_literals()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void binop()       :
{/*@bgen(jjtree) BINOP */
  SimpleNode jjtn000 = new SimpleNode(JJTBINOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/

}
{/*@bgen(jjtree) BINOP */
    try {
/*@egen*/
    <EQUAL>
    |   <UNEQUAL>
    |   <LESS>
    |   <GREATER>
    |   <LESS_OR_EQ>
    |   <GREATER_OR_EQ>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void arithop()         :{/*@bgen(jjtree) ARITHOP */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ARITHOP */
    try {
/*@egen*/
    <PLUS>
    |   <MINUS>
    |   <TIMES>
    |   <DIV>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void aggregate_atom()                :{/*@bgen(jjtree) AGGREGATE_ATOM */
  SimpleNode jjtn000 = new SimpleNode(JJTAGGREGATE_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AGGREGATE_ATOM */
    try {
/*@egen*/
    LOOKAHEAD(5)
    [term() binop()] aggregate_function()
            <CURLY_OPEN> aggregate_elements() <CURLY_CLOSE> binop() term()
    |   term() binop() aggregate_function()
                <CURLY_OPEN> aggregate_elements() <CURLY_CLOSE> [binop() term()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void aggregate_elements()                    :{/*@bgen(jjtree) AGGREGATE_ELEMENTS */
  SimpleNode jjtn000 = new SimpleNode(JJTAGGREGATE_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AGGREGATE_ELEMENTS */
     try {
/*@egen*/
     aggregate_element() [<SEMICOLON> aggregate_elements() ]/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void aggregate_element()                   :{/*@bgen(jjtree) AGGREGATE_ELEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTAGGREGATE_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AGGREGATE_ELEMENT */
    try {
/*@egen*/
    basic_terms() <COLON> naf_literals()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void aggregate_function()                    :{/*@bgen(jjtree) AGGREGATE_FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTAGGREGATE_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AGGREGATE_FUNCTION */
    try {
/*@egen*/
    <AGGR_COUNT>
    |   <AGGR_MAX>
    |   <AGGR_MIN>
    |   <AGGR_SUM>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void atom()      :{/*@bgen(jjtree) ATOM */
  SimpleNode jjtn000 = new SimpleNode(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ATOM */
    try {
/*@egen*/
    predicate_name() [<PARAM_OPEN> [terms()] <PARAM_CLOSE>]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void builtin_atom()              :{/*@bgen(jjtree) BUILTIN_ATOM */
  SimpleNode jjtn000 = new SimpleNode(JJTBUILTIN_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BUILTIN_ATOM */
    try {
/*@egen*/
    term() binop() term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void classic_literal()                 :{/*@bgen(jjtree) CLASSIC_LITERAL */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSIC_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CLASSIC_LITERAL */
    try {
/*@egen*/
    [<MINUS>] atom()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void naf_literals()              :{/*@bgen(jjtree) NAF_LITERALS */
  SimpleNode jjtn000 = new SimpleNode(JJTNAF_LITERALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NAF_LITERALS */
     try {
/*@egen*/
     naf_literal() [<BODY_TERM_SEPARATOR> naf_literals() ]/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void naf_literal()             :{/*@bgen(jjtree) NAF_LITERAL */
  SimpleNode jjtn000 = new SimpleNode(JJTNAF_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NAF_LITERAL */
    try {
/*@egen*/
    LOOKAHEAD(3)
    [<NAF>] classic_literal() | builtin_atom()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void terms()       :{/*@bgen(jjtree) TERMS */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TERMS */
     try {
/*@egen*/
     term() [<BODY_TERM_SEPARATOR> terms() ]/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void basic_terms()             :{/*@bgen(jjtree) BASIC_TERMS */
  SimpleNode jjtn000 = new SimpleNode(JJTBASIC_TERMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BASIC_TERMS */
      try {
/*@egen*/
      basic_term() [<BODY_TERM_SEPARATOR> basic_terms() ]/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void term()      :{/*@bgen(jjtree) TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TERM */
    try {
/*@egen*/
    (LOOKAHEAD(3)
    basic_term()
    |   expressions_term()
    |   function_term()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void basic_term()            :{/*@bgen(jjtree) BASIC_TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTBASIC_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BASIC_TERM */
    try {
/*@egen*/
    ground_term() | variable_term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ground_term()             :{/*@bgen(jjtree) GROUND_TERM */
                                  SimpleNode jjtn000 = new SimpleNode(JJTGROUND_TERM);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token ground_term;}
{/*@bgen(jjtree) GROUND_TERM */
    try {
/*@egen*/
    <SYMBOLIC_COSTANT>
    |   <STRING>
    |    [<MINUS>] ground_term = <NUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.value = String.valueOf(ground_term.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void variable_term()               :{/*@bgen(jjtree) VARIABLE_TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VARIABLE_TERM */
    try {
/*@egen*/
    <VARIABLE>
    |   <ANON_VAR>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void function_term()               :{/*@bgen(jjtree) FUNCTION_TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FUNCTION_TERM */
    try {
/*@egen*/
    predicate_name() <PARAM_OPEN> terms() <PARAM_CLOSE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expressions_term()                  :{/*@bgen(jjtree) EXPRESSIONS_TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONS_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPRESSIONS_TERM */
    try {
/*@egen*/
    expression_term() [arithop() expressions_term()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void expression_term()                 :{/*@bgen(jjtree) EXPRESSION_TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPRESSION_TERM */
       try {
/*@egen*/

       <PARAM_OPEN> expression_term() <PARAM_CLOSE>
    |(   LOOKAHEAD(2)
     ground_term()
    | [<MINUS>] <VARIABLE>
    )/*@bgen(jjtree)*/
       } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           throw (RuntimeException)jjte000;
         }
         if (jjte000 instanceof ParseException) {
           throw (ParseException)jjte000;
         }
         throw (Error)jjte000;
       } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
       }
/*@egen*/
}
void predicate_name()                :{/*@bgen(jjtree) PREDICATE_NAME */
  SimpleNode jjtn000 = new SimpleNode(JJTPREDICATE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PREDICATE_NAME */
    try {
/*@egen*/
    <ID> | <STRING>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}