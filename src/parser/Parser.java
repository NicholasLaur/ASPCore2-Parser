/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package parser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();public static void main(String args[]) throws ParseException {

            Parser parser;
            try {
                File file = new File("C:/Users/nlaur/Desktop/prova.txt");
                FileReader fileReader = new FileReader(file);
                BufferedReader br = new BufferedReader(new FileReader("C:/Users/nlaur/Desktop/prova.txt"));
                parser = new Parser(fileReader);
                String line;
                ParserVisitor visitor = new MyParserVisitor();
                ASPCore2Program start;
                while ((line = br.readLine()) != null) {
                    try {
                        System.out.println(line);
                        ((MyParserVisitor) visitor).negativeVariable.clear();
                        ((MyParserVisitor) visitor).positiveVariable.clear();
                        start = parser.parseOneLine();
                        visitor.visit(start, null);
                        //start.dump("");
                        //((MyParserVisitor) visitor).checkSafety();
                    } catch (Exception e) {
                        System.out.println("Errore nel file");
                        System.out.println(e.getMessage());
                        start = parser.parseOneLine();
                    }
                }
                fileReader = new FileReader(file);
                parser.ReInit(fileReader);
                br = new BufferedReader(new FileReader("C:/Users/nlaur/Desktop/prova.txt"));
                while ((line = br.readLine())!=null){
                    System.out.println(line);
                    start = parser.parseOneLine();
                    ((MyParserVisitor) visitor).checkWarning = true;
                    ((MyParserVisitor) visitor).atoms.clear();
                    visitor.visit(start, null);
                    //start.dump("");
                    ((MyParserVisitor) visitor).checkWarningForAtomNotInHead();
                }
                br.close();
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
            }
        }

  static final public ASPCore2Program parseOneLine() throws ParseException {
    trace_call("parseOneLine");
    try {/*@bgen(jjtree) Parse_one_line */
    ASPCore2Parse_one_line jjtn000 = new ASPCore2Parse_one_line(JJTPARSE_ONE_LINE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ASPCore2Program aspProgram;
      try {
        if (jj_2_1(2)) {
          aspProgram = program();
          switch (jj_nt.kind) {
          case EOL:{
            jj_consume_token(EOL);
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            ;
          }
jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
{if ("" != null) return aspProgram;}
        } else {
          switch (jj_nt.kind) {
          case EOL:{
            jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
{if ("" != null) return null;}
            break;
            }
          case 0:{
            jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
{if ("" != null) return null;}
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parseOneLine");
    }
  }

  static final public ASPCore2Program program() throws ParseException {
    trace_call("program");
    try {/*@bgen(jjtree) Program */
  ASPCore2Program jjtn000 = new ASPCore2Program(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case IDLOWER:
        case IDUPPER:
        case STRING:
        case CONS:
        case WCONS:
        case MINUS:
        case CURLY_OPEN:
        case EQUAL:
        case UNEQUAL:
        case LESS:
        case GREATER:
        case LESS_OR_EQ:
        case GREATER_OR_EQ:{
          rules();
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
{if ("" != null) return jjtn000;}
          break;
          }
        case 0:{
          jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
{if ("" != null) return jjtn000;}
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("program");
    }
  }

  static final public void rules() throws ParseException {
    trace_call("rules");
    try {/*@bgen(jjtree) Rules */
  ASPCore2Rules jjtn000 = new ASPCore2Rules(JJTRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        rule();
        switch (jj_nt.kind) {
        case IDLOWER:
        case IDUPPER:
        case STRING:
        case CONS:
        case WCONS:
        case MINUS:
        case CURLY_OPEN:
        case EQUAL:
        case UNEQUAL:
        case LESS:
        case GREATER:
        case LESS_OR_EQ:
        case GREATER_OR_EQ:{
          rules();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("rules");
    }
  }

  static final public void rule() throws ParseException {
    trace_call("rule");
    try {/*@bgen(jjtree) Rule */
  ASPCore2Rule jjtn000 = new ASPCore2Rule(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case CONS:{
          jj_consume_token(CONS);
          body();
          jj_consume_token(DOT);
          break;
          }
        case IDLOWER:
        case IDUPPER:
        case STRING:
        case MINUS:
        case CURLY_OPEN:
        case EQUAL:
        case UNEQUAL:
        case LESS:
        case GREATER:
        case LESS_OR_EQ:
        case GREATER_OR_EQ:{
          head();
          switch (jj_nt.kind) {
          case CONS:{
            jj_consume_token(CONS);
            body();
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          jj_consume_token(DOT);
          break;
          }
        case WCONS:{
          jj_consume_token(WCONS);
          body();
          jj_consume_token(DOT);
          weight_at_levels();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("rule");
    }
  }

  static final public void weight_at_levels() throws ParseException {
    trace_call("weight_at_levels");
    try {/*@bgen(jjtree) Weight_at_Levels */
  ASPCore2Weight_at_Levels jjtn000 = new ASPCore2Weight_at_Levels(JJTWEIGHT_AT_LEVELS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SQUARE_OPEN);
        weak_term();
        switch (jj_nt.kind) {
        case AT:{
          jj_consume_token(AT);
          weak_term();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        switch (jj_nt.kind) {
        case BODY_TERM_SEPARATOR:{
          jj_consume_token(BODY_TERM_SEPARATOR);
          weak_terms();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(SQUARE_CLOSE);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("weight_at_levels");
    }
  }

  static final public void weak_terms() throws ParseException {
    trace_call("weak_terms");
    try {/*@bgen(jjtree) Weak_Terms */
  ASPCore2Weak_Terms jjtn000 = new ASPCore2Weak_Terms(JJTWEAK_TERMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        weak_term();
        switch (jj_nt.kind) {
        case BODY_TERM_SEPARATOR:{
          jj_consume_token(BODY_TERM_SEPARATOR);
          weak_terms();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("weak_terms");
    }
  }

  static final public void weak_term() throws ParseException {
    trace_call("weak_term");
    try {/*@bgen(jjtree) Weak_Term */
  ASPCore2Weak_Term jjtn000 = new ASPCore2Weak_Term(JJTWEAK_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_2(3)) {
          expressions_term();
        } else {
          switch (jj_nt.kind) {
          case IDLOWER:
          case IDUPPER:
          case STRING:
          case NUMBER:
          case MINUS:
          case ANON_VAR:{
            basic_term();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("weak_term");
    }
  }

  static final public void head() throws ParseException {
    trace_call("head");
    try {/*@bgen(jjtree) Head */
  ASPCore2Head jjtn000 = new ASPCore2Head(JJTHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case IDLOWER:
        case IDUPPER:
        case STRING:
        case MINUS:{
          disjunction();
          break;
          }
        case CURLY_OPEN:
        case EQUAL:
        case UNEQUAL:
        case LESS:
        case GREATER:
        case LESS_OR_EQ:
        case GREATER_OR_EQ:{
          choice_atom();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("head");
    }
  }

  static final public void body() throws ParseException {
    trace_call("body");
    try {/*@bgen(jjtree) Body */
  ASPCore2Body jjtn000 = new ASPCore2Body(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        conjunction();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("body");
    }
  }

  static final public void disjunction() throws ParseException {
    trace_call("disjunction");
    try {/*@bgen(jjtree) Disjunction */
  ASPCore2Disjunction jjtn000 = new ASPCore2Disjunction(JJTDISJUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        classic_literal();
        switch (jj_nt.kind) {
        case HEAD_SEPARATOR:{
          jj_consume_token(HEAD_SEPARATOR);
          disjunction();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
      }
    } finally {
      trace_return("disjunction");
    }
  }

  static final public void conjunction() throws ParseException {
    trace_call("conjunction");
    try {/*@bgen(jjtree) Conjunction */
  ASPCore2Conjunction jjtn000 = new ASPCore2Conjunction(JJTCONJUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_3(3)) {
          naf_literal();
        } else if (jj_2_4(300)) {
          negative_aggregate_atom();
        } else {
          switch (jj_nt.kind) {
          case IDLOWER:
          case IDUPPER:
          case STRING:
          case NUMBER:
          case MINUS:
          case PARAM_OPEN:
          case AGGR_COUNT:
          case AGGR_SUM:
          case AGGR_MAX:
          case AGGR_MIN:
          case ANON_VAR:{
            aggregate_atom();
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch (jj_nt.kind) {
        case BODY_TERM_SEPARATOR:{
          jj_consume_token(BODY_TERM_SEPARATOR);
          conjunction();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("conjunction");
    }
  }

  static final public void choice_atom() throws ParseException {
    trace_call("choice_atom");
    try {/*@bgen(jjtree) Choice_atom */
  ASPCore2Choice_atom jjtn000 = new ASPCore2Choice_atom(JJTCHOICE_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case EQUAL:
        case UNEQUAL:
        case LESS:
        case GREATER:
        case LESS_OR_EQ:
        case GREATER_OR_EQ:{
          binop();
          term();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(CURLY_OPEN);
        choice_elements();
        jj_consume_token(CURLY_CLOSE);
        switch (jj_nt.kind) {
        case EQUAL:
        case UNEQUAL:
        case LESS:
        case GREATER:
        case LESS_OR_EQ:
        case GREATER_OR_EQ:{
          binop();
          term();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("choice_atom");
    }
  }

  static final public void choice_elements() throws ParseException {
    trace_call("choice_elements");
    try {/*@bgen(jjtree) Choice_elements */
  ASPCore2Choice_elements jjtn000 = new ASPCore2Choice_elements(JJTCHOICE_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        choice_element();
        switch (jj_nt.kind) {
        case SEMICOLON:{
          jj_consume_token(SEMICOLON);
          choice_elements();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
      }
    } finally {
      trace_return("choice_elements");
    }
  }

  static final public void choice_element() throws ParseException {
    trace_call("choice_element");
    try {/*@bgen(jjtree) Choice_element */
  ASPCore2Choice_element jjtn000 = new ASPCore2Choice_element(JJTCHOICE_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        atom();
        switch (jj_nt.kind) {
        case COLON:{
          jj_consume_token(COLON);
          naf_literals();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("choice_element");
    }
  }

  static final public void binop() throws ParseException {
    trace_call("binop");
    try {/*@bgen(jjtree) Binop */
  ASPCore2Binop jjtn000 = new ASPCore2Binop(JJTBINOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case EQUAL:{
          jj_consume_token(EQUAL);
          break;
          }
        case UNEQUAL:{
          jj_consume_token(UNEQUAL);
          break;
          }
        case LESS:{
          jj_consume_token(LESS);
          break;
          }
        case GREATER:{
          jj_consume_token(GREATER);
          break;
          }
        case LESS_OR_EQ:{
          jj_consume_token(LESS_OR_EQ);
          break;
          }
        case GREATER_OR_EQ:{
          jj_consume_token(GREATER_OR_EQ);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("binop");
    }
  }

  static final public void negativeBinop() throws ParseException {
    trace_call("negativeBinop");
    try {/*@bgen(jjtree) NegativeBinop */
  ASPCore2NegativeBinop jjtn000 = new ASPCore2NegativeBinop(JJTNEGATIVEBINOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case UNEQUAL:{
          jj_consume_token(UNEQUAL);
          break;
          }
        case LESS:{
          jj_consume_token(LESS);
          break;
          }
        case GREATER:{
          jj_consume_token(GREATER);
          break;
          }
        case LESS_OR_EQ:{
          jj_consume_token(LESS_OR_EQ);
          break;
          }
        case GREATER_OR_EQ:{
          jj_consume_token(GREATER_OR_EQ);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("negativeBinop");
    }
  }

  static final public void arithop() throws ParseException {
    trace_call("arithop");
    try {/*@bgen(jjtree) Arithop */
  ASPCore2Arithop jjtn000 = new ASPCore2Arithop(JJTARITHOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        case TIMES:{
          jj_consume_token(TIMES);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("arithop");
    }
  }

  static final public void negative_aggregate_atom() throws ParseException {
    trace_call("negative_aggregate_atom");
    try {/*@bgen(jjtree) #NegativeAggregate_atom(true) */
  ASPCore2NegativeAggregate_atom jjtn000 = new ASPCore2NegativeAggregate_atom(JJTNEGATIVEAGGREGATE_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_5(5)) {
          switch (jj_nt.kind) {
          case NAF:{
            jj_consume_token(NAF);
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            ;
          }
          term();
          negativeBinop();
          aggregate_function();
          jj_consume_token(CURLY_OPEN);
          aggregate_elements();
          jj_consume_token(CURLY_CLOSE);
        } else if (jj_2_6(500)) {
          switch (jj_nt.kind) {
          case NAF:{
            jj_consume_token(NAF);
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          aggregate_function();
          jj_consume_token(CURLY_OPEN);
          aggregate_elements();
          jj_consume_token(CURLY_CLOSE);
          negativeBinop();
          term();
        } else {
          switch (jj_nt.kind) {
          case NAF:{
            jj_consume_token(NAF);
            aggregate_atom();
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("negative_aggregate_atom");
    }
  }

  static final public void aggregate_atom() throws ParseException {
    trace_call("aggregate_atom");
    try {/*@bgen(jjtree) Aggregate_atom */
  ASPCore2Aggregate_atom jjtn000 = new ASPCore2Aggregate_atom(JJTAGGREGATE_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_7(5)) {
          term();
          jj_consume_token(EQUAL);
          aggregate_function();
          jj_consume_token(CURLY_OPEN);
          aggregate_elements();
          jj_consume_token(CURLY_CLOSE);
        } else {
          switch (jj_nt.kind) {
          case AGGR_COUNT:
          case AGGR_SUM:
          case AGGR_MAX:
          case AGGR_MIN:{
            aggregate_function();
            jj_consume_token(CURLY_OPEN);
            aggregate_elements();
            jj_consume_token(CURLY_CLOSE);
            jj_consume_token(EQUAL);
            term();
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("aggregate_atom");
    }
  }

  static final public void aggregate_elements() throws ParseException {
    trace_call("aggregate_elements");
    try {/*@bgen(jjtree) Aggregate_elements */
  ASPCore2Aggregate_elements jjtn000 = new ASPCore2Aggregate_elements(JJTAGGREGATE_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        aggregate_element();
        switch (jj_nt.kind) {
        case SEMICOLON:{
          jj_consume_token(SEMICOLON);
          aggregate_elements();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
      }
    } finally {
      trace_return("aggregate_elements");
    }
  }

  static final public void aggregate_element() throws ParseException {
    trace_call("aggregate_element");
    try {/*@bgen(jjtree) Aggregate_element */
  ASPCore2Aggregate_element jjtn000 = new ASPCore2Aggregate_element(JJTAGGREGATE_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        basic_terms();
        jj_consume_token(COLON);
        naf_literals();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("aggregate_element");
    }
  }

  static final public void aggregate_function() throws ParseException {
    trace_call("aggregate_function");
    try {/*@bgen(jjtree) Aggregate_function */
  ASPCore2Aggregate_function jjtn000 = new ASPCore2Aggregate_function(JJTAGGREGATE_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case AGGR_COUNT:{
          jj_consume_token(AGGR_COUNT);
          break;
          }
        case AGGR_MAX:{
          jj_consume_token(AGGR_MAX);
          break;
          }
        case AGGR_MIN:{
          jj_consume_token(AGGR_MIN);
          break;
          }
        case AGGR_SUM:{
          jj_consume_token(AGGR_SUM);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("aggregate_function");
    }
  }

  static final public void atom() throws ParseException {
    trace_call("atom");
    try {/*@bgen(jjtree) Atom */
  ASPCore2Atom jjtn000 = new ASPCore2Atom(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        predicate_name();
        switch (jj_nt.kind) {
        case PARAM_OPEN:{
          jj_consume_token(PARAM_OPEN);
          switch (jj_nt.kind) {
          case IDLOWER:
          case IDUPPER:
          case STRING:
          case NUMBER:
          case MINUS:
          case PARAM_OPEN:
          case ANON_VAR:{
            terms();
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            ;
          }
          jj_consume_token(PARAM_CLOSE);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("atom");
    }
  }

  static final public void negative_builtin_atom() throws ParseException {
    trace_call("negative_builtin_atom");
    try {/*@bgen(jjtree) NegativeBuiltin_atom */
  ASPCore2NegativeBuiltin_atom jjtn000 = new ASPCore2NegativeBuiltin_atom(JJTNEGATIVEBUILTIN_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        term();
        negativeBinop();
        term();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("negative_builtin_atom");
    }
  }

  static final public void builtin_atom() throws ParseException {
    trace_call("builtin_atom");
    try {/*@bgen(jjtree) Builtin_atom */
  ASPCore2Builtin_atom jjtn000 = new ASPCore2Builtin_atom(JJTBUILTIN_ATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        term();
        jj_consume_token(EQUAL);
        term();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("builtin_atom");
    }
  }

  static final public void naf_classic_literal() throws ParseException {
    trace_call("naf_classic_literal");
    try {/*@bgen(jjtree) Naf_Classic_literal */
  ASPCore2Naf_Classic_literal jjtn000 = new ASPCore2Naf_Classic_literal(JJTNAF_CLASSIC_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(NAF);
        classic_literal();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("naf_classic_literal");
    }
  }

  static final public void classic_literal() throws ParseException {
    trace_call("classic_literal");
    try {/*@bgen(jjtree) Classic_literal */
  ASPCore2Classic_literal jjtn000 = new ASPCore2Classic_literal(JJTCLASSIC_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        atom();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("classic_literal");
    }
  }

  static final public void naf_literals() throws ParseException {
    trace_call("naf_literals");
    try {/*@bgen(jjtree) Naf_literals */
  ASPCore2Naf_literals jjtn000 = new ASPCore2Naf_literals(JJTNAF_LITERALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        naf_literal();
        switch (jj_nt.kind) {
        case BODY_TERM_SEPARATOR:{
          jj_consume_token(BODY_TERM_SEPARATOR);
          naf_literals();
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
      }
    } finally {
      trace_return("naf_literals");
    }
  }

  static final public void naf_literal() throws ParseException {
    trace_call("naf_literal");
    try {/*@bgen(jjtree) Naf_literal */
  ASPCore2Naf_literal jjtn000 = new ASPCore2Naf_literal(JJTNAF_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_10(400)) {
          if (jj_2_8(400)) {
            negative_builtin_atom();
          } else {
            switch (jj_nt.kind) {
            case NAF:{
              naf_classic_literal();
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          switch (jj_nt.kind) {
          case IDLOWER:
          case IDUPPER:
          case STRING:
          case NUMBER:
          case MINUS:
          case PARAM_OPEN:
          case ANON_VAR:{
            if (jj_2_9(400)) {
              builtin_atom();
            } else {
              switch (jj_nt.kind) {
              case IDLOWER:
              case IDUPPER:
              case STRING:
              case MINUS:{
                classic_literal();
                break;
                }
              default:
                jj_la1[32] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("naf_literal");
    }
  }

  static final public void terms() throws ParseException {
    trace_call("terms");
    try {/*@bgen(jjtree) Terms */
  ASPCore2Terms jjtn000 = new ASPCore2Terms(JJTTERMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        term();
        switch (jj_nt.kind) {
        case BODY_TERM_SEPARATOR:{
          jj_consume_token(BODY_TERM_SEPARATOR);
          terms();
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
      }
    } finally {
      trace_return("terms");
    }
  }

  static final public void basic_terms() throws ParseException {
    trace_call("basic_terms");
    try {/*@bgen(jjtree) Basic_terms */
  ASPCore2Basic_terms jjtn000 = new ASPCore2Basic_terms(JJTBASIC_TERMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        basic_term();
        switch (jj_nt.kind) {
        case BODY_TERM_SEPARATOR:{
          jj_consume_token(BODY_TERM_SEPARATOR);
          basic_terms();
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
    } finally {
      trace_return("basic_terms");
    }
  }

  static final public void term() throws ParseException {
    trace_call("term");
    try {/*@bgen(jjtree) Term */
  ASPCore2Term jjtn000 = new ASPCore2Term(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_11(20)) {
          function_term();
        } else if (jj_2_12(3)) {
          expressions_term();
        } else {
          switch (jj_nt.kind) {
          case IDLOWER:
          case IDUPPER:
          case STRING:
          case NUMBER:
          case MINUS:
          case ANON_VAR:{
            basic_term();
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("term");
    }
  }

  static final public void basic_term() throws ParseException {
    trace_call("basic_term");
    try {/*@bgen(jjtree) Basic_term */
  ASPCore2Basic_term jjtn000 = new ASPCore2Basic_term(JJTBASIC_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_13(2)) {
          ground_term();
        } else {
          switch (jj_nt.kind) {
          case IDUPPER:
          case ANON_VAR:{
            variable_term();
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("basic_term");
    }
  }

  static final public void ground_term() throws ParseException {
    trace_call("ground_term");
    try {/*@bgen(jjtree) Ground_term */
                                 ASPCore2Ground_term jjtn000 = new ASPCore2Ground_term(JJTGROUND_TERM);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch (jj_nt.kind) {
        case IDLOWER:{
          t = jj_consume_token(IDLOWER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.value = String.valueOf(t.image);
          break;
          }
        case STRING:{
          t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = String.valueOf(t.image);
          break;
          }
        case NUMBER:
        case MINUS:{
          switch (jj_nt.kind) {
          case MINUS:{
            jj_consume_token(MINUS);
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            ;
          }
          t = jj_consume_token(NUMBER);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
jjtn000.value = String.valueOf(t.image);
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("ground_term");
    }
  }

  static final public void variable_term() throws ParseException {
    trace_call("variable_term");
    try {/*@bgen(jjtree) Variable_term */
                                     ASPCore2Variable_term jjtn000 = new ASPCore2Variable_term(JJTVARIABLE_TERM);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch (jj_nt.kind) {
        case IDUPPER:{
          t = jj_consume_token(IDUPPER);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.value = t;
          break;
          }
        case ANON_VAR:{
          t = jj_consume_token(ANON_VAR);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("variable_term");
    }
  }

  static final public void function_term() throws ParseException {
    trace_call("function_term");
    try {/*@bgen(jjtree) Function_term */
  ASPCore2Function_term jjtn000 = new ASPCore2Function_term(JJTFUNCTION_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        predicate_name();
        jj_consume_token(PARAM_OPEN);
        terms();
        jj_consume_token(PARAM_CLOSE);
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("function_term");
    }
  }

  static final public void expressions_term() throws ParseException {
    trace_call("expressions_term");
    try {/*@bgen(jjtree) Expressions_term */
  ASPCore2Expressions_term jjtn000 = new ASPCore2Expressions_term(JJTEXPRESSIONS_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        expression_term();
        arithop();
        expression_term();
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("expressions_term");
    }
  }

  static final public void expression_term() throws ParseException {
    trace_call("expression_term");
    try {/*@bgen(jjtree) Expression_term */
  ASPCore2Expression_term jjtn000 = new ASPCore2Expression_term(JJTEXPRESSION_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch (jj_nt.kind) {
        case PARAM_OPEN:{
          jj_consume_token(PARAM_OPEN);
          expression_term();
          jj_consume_token(PARAM_CLOSE);
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          if (jj_2_14(20)) {
            switch (jj_nt.kind) {
            case MINUS:{
              jj_consume_token(MINUS);
              break;
              }
            default:
              jj_la1[41] = jj_gen;
              ;
            }
            jj_consume_token(IDUPPER);
          } else {
            switch (jj_nt.kind) {
            case IDLOWER:
            case STRING:
            case NUMBER:
            case MINUS:{
              ground_term();
              break;
              }
            default:
              jj_la1[43] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("expression_term");
    }
  }

  static final public ASPCore2Predicate_name predicate_name() throws ParseException {
    trace_call("predicate_name");
    try {/*@bgen(jjtree) Predicate_name */
                                                         ASPCore2Predicate_name jjtn000 = new ASPCore2Predicate_name(JJTPREDICATE_NAME);
                                                         boolean jjtc000 = true;
                                                         jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch (jj_nt.kind) {
        case IDLOWER:{
          t = jj_consume_token(IDLOWER);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.value = t;{if ("" != null) return jjtn000;}
          break;
          }
        case IDUPPER:{
          t = jj_consume_token(IDUPPER);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t;{if ("" != null) return jjtn000;}
          break;
          }
        case STRING:{
          t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.value = t;{if ("" != null) return jjtn000;}
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("predicate_name");
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(IDUPPER)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_scan_token(IDLOWER)) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    if (jj_scan_token(IDUPPER)) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_61()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_scan_token(PARAM_OPEN)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(PARAM_CLOSE)) return true;
    return false;
  }

  static private boolean jj_3R_60()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_2()
 {
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_24()) return true;
    if (jj_scan_token(PARAM_OPEN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(PARAM_CLOSE)) return true;
    return false;
  }

  static private boolean jj_3R_57()
 {
    if (jj_scan_token(ANON_VAR)) return true;
    return false;
  }

  static private boolean jj_3R_55()
 {
    if (jj_scan_token(CONS)) return true;
    return false;
  }

  static private boolean jj_3R_56()
 {
    if (jj_scan_token(IDUPPER)) return true;
    return false;
  }

  static private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  static private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_scan_token(WCONS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(IDLOWER)) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_scan_token(BODY_TERM_SEPARATOR)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(BODY_TERM_SEPARATOR)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_1()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_scan_token(BODY_TERM_SEPARATOR)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_3R_5()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_58()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_36()
 {
    if (jj_3R_3()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_scan_token(PARAM_OPEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(PARAM_CLOSE)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(NAF)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    if (jj_3R_5()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_62()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_3R_7()) return true;
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(CURLY_CLOSE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_5()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(CURLY_CLOSE)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(NAF)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(CURLY_CLOSE)) return true;
    if (jj_3R_6()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(CURLY_CLOSE)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_69()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_65()
 {
    if (jj_scan_token(HEAD_SEPARATOR)) return true;
    return false;
  }

  static private boolean jj_3R_67()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_66()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_63()
 {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x1,0xa0580e01,0xa0580e00,0x80000,0xa0580e00,0x0,0x4000,0x4000,0x401e00,0xa0400e00,0x40000,0x2401e00,0x4000,0x80000000,0x80000000,0x20000,0x10000,0x80000000,0x0,0x1e00000,0x100,0x100,0x100,0x0,0x20000,0x0,0x2401e00,0x2000000,0x400000,0x4000,0x100,0x400e00,0x2401e00,0x4000,0x4000,0x401e00,0x400,0x400000,0x401a00,0x400,0x400000,0x2000000,0x401a00,0xe00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x1000,0x1f,0x1f,0x0,0x1f,0x800,0x0,0x0,0x2000,0x1f,0x0,0x21e0,0x0,0x1f,0x1f,0x0,0x0,0x1f,0x1f,0x0,0x0,0x0,0x0,0x1e0,0x0,0x1e0,0x2000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x2000,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
