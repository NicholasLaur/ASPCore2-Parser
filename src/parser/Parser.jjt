options{
    ERROR_REPORTING = true;
    MULTI = true;
    VISITOR = true;
    //NODE_DEFAULT_VOID=true;
    NODE_PREFIX = "ASPCore2";
    CACHE_TOKENS = true;
    OUTPUT_DIRECTORY = "parser/";
}

PARSER_BEGIN(Parser)
package parser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
public class Parser
{
     public static void main(String args[]) throws ParseException {

            Parser parser;
            try {
                File file = new File("C:/Users/nlaur/Desktop/prova.txt");
                FileReader fileReader = new FileReader(file);
                BufferedReader br = new BufferedReader(new FileReader("C:/Users/nlaur/Desktop/prova.txt"));
                parser = new Parser(fileReader);
                String line;
                ParserVisitor visitor = new MyParserVisitor();
                ASPCore2Program start;
                while ((line = br.readLine()) != null) {
                    try {
                        System.out.println(line);
                        ((MyParserVisitor) visitor).negativeVariable.clear();
                        ((MyParserVisitor) visitor).positiveVariable.clear();
                        start = parser.parseOneLine();
                        visitor.visit(start, null);
                        //start.dump("");
                        //((MyParserVisitor) visitor).checkSafety();
                    } catch (Exception e) {
                        System.out.println("Errore nel file");
                        System.out.println(e.getMessage());
                        start = parser.parseOneLine();
                    }
                }
                fileReader = new FileReader(file);
                parser.ReInit(fileReader);
                br = new BufferedReader(new FileReader("C:/Users/nlaur/Desktop/prova.txt"));
                while ((line = br.readLine())!=null){
                    System.out.println(line);
                    start = parser.parseOneLine();
                    ((MyParserVisitor) visitor).checkWarning = true;
                    ((MyParserVisitor) visitor).atoms.clear();
                    visitor.visit(start, null);
                    //start.dump("");
                    ((MyParserVisitor) visitor).checkWarningForAtomNotInHead();
                }
                br.close();
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
            }
        }
}
PARSER_END(Parser)
SKIP :
{
    " "
|   "\r"
|   "\t"
}
TOKEN:{
    < NAF: "not">
}

TOKEN:
{
    < IDLOWER: <LOWERLETTER> (<UPPERLETTER> | <LOWERLETTER> | <NUMBER> | "_")*>
|   < IDUPPER: <UPPERLETTER> (<UPPERLETTER> | <LOWERLETTER> | <NUMBER> | "_")*>
|   < STRING: "\""(["\\","a"-"z","A"-"Z","_","0"-"9"])*"\"">
|   < NUMBER: (["0"-"9"])+ >
|   < DOT: ".">
|   < BODY_TERM_SEPARATOR: ",">
|   < QUERY_MARK: "?">
|   < COLON: ":">
|   < SEMICOLON: ";">
|   < HEAD_SEPARATOR: "|">
|   < CONS: ":-">
|   < WCONS: ":~">
|   < PLUS: "+">
|   < MINUS: "-">
|   < TIMES: "*">
|   < DIV: "/">
|   < PARAM_OPEN: "(">
|   < PARAM_CLOSE: ")">
|   < SQUARE_OPEN: "[">
|   < SQUARE_CLOSE: "]">
|   < CURLY_OPEN: "{">
|   < CURLY_CLOSE: "}">
|   < EQUAL: "=">
|   < UNEQUAL: "<>" | "!=">
|   < LESS: "<">
|   < GREATER: ">">
|   < LESS_OR_EQ: "<=">
|   < GREATER_OR_EQ: ">=">
|   < AGGR_COUNT: "#count">
|   < AGGR_SUM: "#sum">
|   < AGGR_MAX: "#max">
|   < AGGR_MIN: "#min">
|   < COMMENT: "%.*$">
|   < MULTI_LINE_COMMENT: "/%.*%/">
|   < UPPERLETTER : ["A"-"Z"]>
|   < LOWERLETTER: ["a"-"z"]>
|   < AT: "@">
|   < EOL: "\n" >
|   < ANON_VAR:"_">
}

ASPCore2Program parseOneLine() #Parse_one_line:
{
    ASPCore2Program aspProgram;
}
{
   LOOKAHEAD(2) aspProgram = program() [<EOL>] {return aspProgram;}
  | <EOL>               { return null; }
  | <EOF>               { return null; }
}

ASPCore2Program program() #Program:{}
{
    rules() {return jjtThis;}
}

void rules() #Rules:{}
{
    rule()[rules()]
}

void rule() #Rule:{}
{
    <CONS> body() <DOT>
|    head() [<CONS> body()] <DOT>
|   <WCONS> body() <DOT> [weight_at_levels()]
}

void weight_at_levels() #Weight_at_Levels:{}
{
    <SQUARE_OPEN> weak_term() [<AT> weak_term()][<BODY_TERM_SEPARATOR> weak_terms()] <SQUARE_CLOSE>
}

void weak_terms() #Weak_Terms:{}
{
    weak_term() [<BODY_TERM_SEPARATOR> weak_terms()]
}

void weak_term() #Weak_Term:{}
{
    LOOKAHEAD(3) expressions_term()
        |   basic_term()
}
void head() #Head:{}
{
    disjunction() |
     choice_atom()
}

void body() #Body:{}
{
    conjunction()
}

void disjunction() #Disjunction:{}
{
     classic_literal() [<HEAD_SEPARATOR> disjunction()]
}

void conjunction() #Conjunction:{}
{
    (LOOKAHEAD(3) naf_literal() | LOOKAHEAD(300) negative_aggregate_atom() | aggregate_atom())
    [<BODY_TERM_SEPARATOR> conjunction()]
}

void choice_atom() #Choice_atom:{}
{
    [binop() term()] <CURLY_OPEN> choice_elements() <CURLY_CLOSE> [binop() term()]
}

void choice_elements() #Choice_elements:{}
{
     choice_element() [<SEMICOLON> choice_elements()]
}

void choice_element() #Choice_element:{}
{
   atom() [<COLON> naf_literals()]
}

void binop() #Binop:{}
{
    <EQUAL>
    |   <UNEQUAL>
    |   <LESS>
    |   <GREATER>
    |   <LESS_OR_EQ>
    |   <GREATER_OR_EQ>
}

void negativeBinop() #NegativeBinop:{}
{
    <UNEQUAL>
    |   <LESS>
    |   <GREATER>
    |   <LESS_OR_EQ>
    |   <GREATER_OR_EQ>
}

void arithop() #Arithop:{}
{
    <PLUS>
    |   <MINUS>
    |   <TIMES>
    |   <DIV>
}

void negative_aggregate_atom() #NegativeAggregate_atom():{}
{
    LOOKAHEAD(5)
    [<NAF>] term() negativeBinop() aggregate_function()
                    <CURLY_OPEN> aggregate_elements() <CURLY_CLOSE>
    |
    LOOKAHEAD(500)
    [<NAF>] aggregate_function()
                    <CURLY_OPEN> aggregate_elements() <CURLY_CLOSE> negativeBinop() term()

    |
     <NAF> aggregate_atom()
}

void aggregate_atom() #Aggregate_atom:{}
{
    LOOKAHEAD(5)
    term() <EQUAL> aggregate_function()
                <CURLY_OPEN> aggregate_elements() <CURLY_CLOSE>
    |
    aggregate_function()
                <CURLY_OPEN> aggregate_elements() <CURLY_CLOSE> <EQUAL> term()

}

void aggregate_elements() #Aggregate_elements:{}
{
     aggregate_element() [<SEMICOLON> aggregate_elements() ]
}

void aggregate_element() #Aggregate_element:{}
{
    basic_terms() <COLON> naf_literals()
}

void aggregate_function() #Aggregate_function:{}
{
    <AGGR_COUNT>
    |   <AGGR_MAX>
    |   <AGGR_MIN>
    |   <AGGR_SUM>
}

void atom() #Atom:{}
{
    predicate_name() [<PARAM_OPEN> [terms()] <PARAM_CLOSE>]
}

void negative_builtin_atom() #NegativeBuiltin_atom:{}
{
    term() negativeBinop() term()
}

void builtin_atom() #Builtin_atom:{}
{
    term() <EQUAL> term()
}

void naf_classic_literal() #Naf_Classic_literal:{}
{
    <NAF> classic_literal()
}

void classic_literal() #Classic_literal:{}
{
    [<MINUS>] atom()
}

void naf_literals() #Naf_literals:{}
{
     naf_literal() [<BODY_TERM_SEPARATOR> naf_literals() ]
}

void naf_literal() #Naf_literal:{}
{
    (LOOKAHEAD(400)(LOOKAHEAD(400) negative_builtin_atom() | naf_classic_literal() )
    |  (LOOKAHEAD(400) builtin_atom() | classic_literal() ))
}
void terms() #Terms:{}
{
     term() [<BODY_TERM_SEPARATOR> terms()]
}

void basic_terms() #Basic_terms:{}
{
      basic_term() [<BODY_TERM_SEPARATOR> basic_terms() ]
}

void term() #Term:{}
{
    (
        LOOKAHEAD(20) function_term()
    |   LOOKAHEAD(3) expressions_term()
    |   basic_term()
    )
}

void basic_term() #Basic_term:{}
{
    LOOKAHEAD(2)
    ground_term()
    | variable_term()
}

void ground_term() #Ground_term:{Token t;}
{
    t = <IDLOWER> {jjtThis.value = String.valueOf(t.image);}
    |   t = <STRING> {jjtThis.value = String.valueOf(t.image);}
    |    [<MINUS>] t = <NUMBER> {jjtThis.value = String.valueOf(t.image);}
}

void variable_term() #Variable_term:{Token t;}
{

    t = <IDUPPER> {jjtThis.value = t;}
    |  t= <ANON_VAR> {jjtThis.value = t;}
}

void function_term() #Function_term:{}
{
    predicate_name() <PARAM_OPEN> terms() <PARAM_CLOSE>
}

void expressions_term() #Expressions_term:{}
{
    expression_term() arithop() expression_term()
}
void expression_term() #Expression_term:{}
{

    <PARAM_OPEN> expression_term() <PARAM_CLOSE>
    | LOOKAHEAD(20)[<MINUS>] <IDUPPER>
    |  ground_term()

}

ASPCore2Predicate_name predicate_name() #Predicate_name:{Token t;}
{
    t= <IDLOWER>       {jjtThis.value = t;return jjtThis;}
   | t= <IDUPPER>       {jjtThis.value = t;return jjtThis;}
    | t = <STRING>  {jjtThis.value = t;return jjtThis;}
}

TOKEN:{
   <ERROR_LEXICAL: ~[ ]>
}