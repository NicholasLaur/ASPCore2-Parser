/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NAF = 4;
  /** RegularExpression Id. */
  int ID = 5;
  /** RegularExpression Id. */
  int SYMBOLIC_COSTANT = 6;
  /** RegularExpression Id. */
  int VARIABLE = 7;
  /** RegularExpression Id. */
  int STRING = 8;
  /** RegularExpression Id. */
  int NUMBER = 9;
  /** RegularExpression Id. */
  int DOT = 10;
  /** RegularExpression Id. */
  int BODY_TERM_SEPARATOR = 11;
  /** RegularExpression Id. */
  int QUERY_MARK = 12;
  /** RegularExpression Id. */
  int COLON = 13;
  /** RegularExpression Id. */
  int SEMICOLON = 14;
  /** RegularExpression Id. */
  int HEAD_SEPARATOR = 15;
  /** RegularExpression Id. */
  int CONS = 16;
  /** RegularExpression Id. */
  int WCONS = 17;
  /** RegularExpression Id. */
  int PLUS = 18;
  /** RegularExpression Id. */
  int MINUS = 19;
  /** RegularExpression Id. */
  int TIMES = 20;
  /** RegularExpression Id. */
  int DIV = 21;
  /** RegularExpression Id. */
  int PARAM_OPEN = 22;
  /** RegularExpression Id. */
  int PARAM_CLOSE = 23;
  /** RegularExpression Id. */
  int SQUARE_OPEN = 24;
  /** RegularExpression Id. */
  int SQUARE_CLOSE = 25;
  /** RegularExpression Id. */
  int CURLY_OPEN = 26;
  /** RegularExpression Id. */
  int CURLY_CLOSE = 27;
  /** RegularExpression Id. */
  int EQUAL = 28;
  /** RegularExpression Id. */
  int UNEQUAL = 29;
  /** RegularExpression Id. */
  int LESS = 30;
  /** RegularExpression Id. */
  int GREATER = 31;
  /** RegularExpression Id. */
  int LESS_OR_EQ = 32;
  /** RegularExpression Id. */
  int GREATER_OR_EQ = 33;
  /** RegularExpression Id. */
  int AGGR_COUNT = 34;
  /** RegularExpression Id. */
  int AGGR_SUM = 35;
  /** RegularExpression Id. */
  int AGGR_MAX = 36;
  /** RegularExpression Id. */
  int AGGR_MIN = 37;
  /** RegularExpression Id. */
  int COMMENT = 38;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 39;
  /** RegularExpression Id. */
  int LETTER = 40;
  /** RegularExpression Id. */
  int AT = 41;
  /** RegularExpression Id. */
  int EOL = 42;
  /** RegularExpression Id. */
  int ANON_VAR = 43;
  /** RegularExpression Id. */
  int ALTRO = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"not\"",
    "<ID>",
    "<SYMBOLIC_COSTANT>",
    "<VARIABLE>",
    "<STRING>",
    "<NUMBER>",
    "\".\"",
    "\",\"",
    "\"?\"",
    "\":\"",
    "\";\"",
    "\"|\"",
    "\":-\"",
    "\":~\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "<UNEQUAL>",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"#count\"",
    "\"#sum\"",
    "\"#max\"",
    "\"#min\"",
    "\"%.*$\"",
    "\"/%.*%/\"",
    "<LETTER>",
    "\"@\"",
    "\"\\n\"",
    "\"_\"",
    "<ALTRO>",
  };

}
