/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NAF = 4;
  /** RegularExpression Id. */
  int IDLOWER = 5;
  /** RegularExpression Id. */
  int IDUPPER = 6;
  /** RegularExpression Id. */
  int STRING = 7;
  /** RegularExpression Id. */
  int NUMBER = 8;
  /** RegularExpression Id. */
  int DOT = 9;
  /** RegularExpression Id. */
  int BODY_TERM_SEPARATOR = 10;
  /** RegularExpression Id. */
  int QUERY_MARK = 11;
  /** RegularExpression Id. */
  int COLON = 12;
  /** RegularExpression Id. */
  int SEMICOLON = 13;
  /** RegularExpression Id. */
  int HEAD_SEPARATOR = 14;
  /** RegularExpression Id. */
  int CONS = 15;
  /** RegularExpression Id. */
  int WCONS = 16;
  /** RegularExpression Id. */
  int PLUS = 17;
  /** RegularExpression Id. */
  int MINUS = 18;
  /** RegularExpression Id. */
  int TIMES = 19;
  /** RegularExpression Id. */
  int DIV = 20;
  /** RegularExpression Id. */
  int PARAM_OPEN = 21;
  /** RegularExpression Id. */
  int PARAM_CLOSE = 22;
  /** RegularExpression Id. */
  int SQUARE_OPEN = 23;
  /** RegularExpression Id. */
  int SQUARE_CLOSE = 24;
  /** RegularExpression Id. */
  int CURLY_OPEN = 25;
  /** RegularExpression Id. */
  int CURLY_CLOSE = 26;
  /** RegularExpression Id. */
  int EQUAL = 27;
  /** RegularExpression Id. */
  int UNEQUAL = 28;
  /** RegularExpression Id. */
  int LESS = 29;
  /** RegularExpression Id. */
  int GREATER = 30;
  /** RegularExpression Id. */
  int LESS_OR_EQ = 31;
  /** RegularExpression Id. */
  int GREATER_OR_EQ = 32;
  /** RegularExpression Id. */
  int AGGR_COUNT = 33;
  /** RegularExpression Id. */
  int AGGR_SUM = 34;
  /** RegularExpression Id. */
  int AGGR_MAX = 35;
  /** RegularExpression Id. */
  int AGGR_MIN = 36;
  /** RegularExpression Id. */
  int COMMENT = 37;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 38;
  /** RegularExpression Id. */
  int UPPERLETTER = 39;
  /** RegularExpression Id. */
  int LOWERLETTER = 40;
  /** RegularExpression Id. */
  int AT = 41;
  /** RegularExpression Id. */
  int EOL = 42;
  /** RegularExpression Id. */
  int ANON_VAR = 43;
  /** RegularExpression Id. */
  int ERROR_LEXICAL = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"not\"",
    "<IDLOWER>",
    "<IDUPPER>",
    "<STRING>",
    "<NUMBER>",
    "\".\"",
    "\",\"",
    "\"?\"",
    "\":\"",
    "\";\"",
    "\"|\"",
    "\":-\"",
    "\":~\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "<UNEQUAL>",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"#count\"",
    "\"#sum\"",
    "\"#max\"",
    "\"#min\"",
    "\"%.*$\"",
    "\"/%.*%/\"",
    "<UPPERLETTER>",
    "<LOWERLETTER>",
    "\"@\"",
    "\"\\n\"",
    "\"_\"",
    "<ERROR_LEXICAL>",
  };

}
